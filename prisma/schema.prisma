// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//AuthJs

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Producto {
  id          String      @id @default(uuid())
  nombre      String
  description String?
  inStock     Int?
  price       Float?
  slug        String      @unique
  images      String[]    @default([])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categorias  Categoria[]
  orderItems  OrderItem[]
}

model Categoria {
  id          String  @id @default(uuid())
  nombre      String
  slug        String  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  productos   Producto[]
}

model Order {
  id              String      @id @default(uuid())
  transactionId   String?
  paidAt          DateTime?
  status          OrderStatus @default(PENDING)
  total           Float
  subTotal        Float
  tax             Float
  shippingCost    Float       @default(0)
  itemsInOrder    Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  firstName       String
  lastName        String
  email           String      @default("")
  address         String
  country         String      @default("Colombia")
  city            String
  phone           String
  orderItems      OrderItem[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  COMPLETED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Producto @relation(fields: [productId], references: [id])

  @@map("order_items")
}


